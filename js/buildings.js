Game.BuildingRepository = new Game.Repository('buildings', Game.Building);

// Building template:
//
// Game.BuildingRepository.define('name', {
// 		exactProperties: bool,
// 		width: int, 					-- required
// 		height: int, 					-- required
// 		stories: int, 					-- required
// 		name: string,					-- required (for now)
// 		roomNumber: int,
// 		items: object,
// 		roomSize: int,
// 		createBlueprint: function, 		-- 	function to generate initial tiles (stored in _blueprint)
// 		placeRooms: function, 			-- 	used to augment the tiles generated by createBlueprint 
// 		placeStairs: function,			-- 	used to place stair tiles
// 		generateRoomRegions: function, 	-- 	used to populate a reference object for tracking room locations
//											(stored in _roomRegions)
// 		placeDoors: function, 			-- 	used to place door tiles in walls
// 		placeItems: function, 			-- 	populates _items
// 		build: function					-- 	used to order the way that the previous functions are called,
//											finalizing _blueprint
// });
//
// By default, if only the required settings are set, calling a building's `build()` function
// will produce a generic office building. Creating a custom function for the above will
// likely mean that custom versions of the others will need to be supplied as well, but in the
// future, these functions can perhaps be a bit more flexible in order to work with uncertain
// tiles created by custom `createBlueprint` functions etc.

Game.BuildingRepository.define('office building', {
	width: Game.getLotSize() / 2,
	height: Game.getLotSize() / 2,
	stories: 4,
	roomNumber: 6
});

Game.BuildingRepository.define('apartment', {
	exactProperties: true,
	width: Game.getLotSize() - 4, // 2 tile sidewalks
	height: Game.getLotSize() - 4,
	stories: 3,
});